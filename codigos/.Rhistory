# Adicionar marcas de eixo y em valores transformados de volta para a escala original
axis(2, at = sqrt_pretty_labels, labels = pretty_labels, las = 2)
gráfico de barras no R  com cidades s suas áreas em milhas quadradas com eixo y em escala linear.
# Dados das áreas das cidades
cidades <- c("NY", "PA", "ME", "MA", "VT", "NH", "NJ", "CT", "RI")
areas <- c(50000, 45000, 35000, 10000, 9000, 8000, 7000, 5000, 1000)
# Criar um dataframe
dados <- data.frame(Cidade = cidades, Area = areas)
# Criar o gráfico de barras
barplot(dados$Area, names.arg = dados$Cidade, col = "blue", 
        main = "Áreas das Cidades em Milhas Quadradas", 
        xlab = "Cidades", ylab = "Área (milhas quadradas)", 
        las = 2, cex.names = 0.8)
# Adicionar escala linear ao eixo y
axis(2, at = pretty(dados$Area), las = 2)
# Dados das áreas das cidades
cidades <- c("NY", "PA", "ME", "MA", "VT", "NH", "NJ", "CT", "RI")
areas <- c(50000, 45000, 35000, 10000, 9000, 8000, 7000, 5000, 1000)
# Criar um dataframe
dados <- data.frame(Cidade = cidades, Area = areas)
# Calcular a raiz quadrada das áreas
sqrt_areas <- sqrt(dados$Area)
# Definir os rótulos do eixo y baseados nos valores originais e remover valores indesejados
pretty_labels <- pretty(dados$Area)
filtered_pretty_labels <- pretty_labels[!pretty_labels %in% c(100, 150, 200, 250)]
sqrt_filtered_pretty_labels <- sqrt(filtered_pretty_labels)
# Configurar a janela gráfica
plot(1, type = "n", xlab = "Cidades", ylab = "", 
     xlim = c(1, length(cidades)), ylim = c(0, max(sqrt_areas) * 1.2), 
     xaxt = "n", yaxt = "n")
# Adicionar eixos com escala raiz quadrada
axis(1, at = 1:length(cidades), labels = cidades, las = 2)
axis(2, at = sqrt_filtered_pretty_labels, labels = filtered_pretty_labels, las = 2)
# Adicionar grid para melhorar a visualização
abline(h = sqrt_filtered_pretty_labels, col = "lightgray", lty = "dotted")
abline(v = 1:length(cidades), col = "lightgray", lty = "dotted")
install.packages("languageserver")
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(legend.position = "none")
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 20, face = "bold"),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14)
  )
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5)
  )
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme(axis.text=element_text(size=12, face="bold"),
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5)
  )
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.text = element_text(size = 14, face="bold")
  )
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.text = element_text(size = 12, face="bold"),
    axis.text = element_text(size = 14, face="bold")
  )
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 20, face = "bold"),
    axis.text = element_text(size = 16)
  )
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Gerar dados simulados
set.seed(123)
grupo_A <- rnorm(50, mean = 5, sd = 2)
grupo_B <- rnorm(50, mean = 6, sd = 2)
# Calcular médias e ICs
calc_ic <- function(data, conf.level = 0.95) {
  n <- length(data)
  mean <- mean(data)
  stderr <- sd(data) / sqrt(n)
  error <- qt(conf.level / 2 + 0.5, df = n - 1) * stderr
  c(mean = mean, lower = mean - error, upper = mean + error)
}
ic_A <- calc_ic(grupo_A)
ic_B <- calc_ic(grupo_B)
# Criar dataframe para plotagem
data_ic <- data.frame(
  grupo = c("A", "B"),
  media = c(ic_A["mean"], ic_B["mean"]),
  lower = c(ic_A["lower"], ic_B["lower"]),
  upper = c(ic_A["upper"], ic_B["upper"])
)
# Plotar os ICs
ggplot(data_ic, aes(x = grupo, y = media)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  labs(title = "Intervalos de Confiança de 95% para Médias dos Grupos",
       x = "Grupo", y = "Média") +
  theme_minimal()
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(legend.position = "none")
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Gerar dados simulados
set.seed(123)
grupo_A <- rnorm(50, mean = 5, sd = 2)
grupo_B <- rnorm(50, mean = 6, sd = 2)
# Calcular médias e ICs
calc_ic <- function(data, conf.level = 0.95) {
  n <- length(data)
  mean <- mean(data)
  stderr <- sd(data) / sqrt(n)
  error <- qt(conf.level / 2 + 0.5, df = n - 1) * stderr
  c(mean = mean, lower = mean - error, upper = mean + error)
}
ic_A <- calc_ic(grupo_A)
ic_B <- calc_ic(grupo_B)
# Criar dataframe para plotagem
data_ic <- data.frame(
  grupo = c("A", "B"),
  media = c(ic_A["mean"], ic_B["mean"]),
  lower = c(ic_A["lower"], ic_B["lower"]),
  upper = c(ic_A["upper"], ic_B["upper"])
)
# Plotar os ICs
ggplot(data_ic, aes(x = grupo, y = media)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  labs(title = "Intervalos de Confiança de 95% para Médias dos Grupos",
       x = "Grupo", y = "Média") +
  theme_minimal()
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.text = element_text(size = 12, face="bold"),
    axis.text = element_text(size = 16)
  )
# Carregar o pacote necessário
library(ggplot2)
# Gerar dados simulados
set.seed(123)
data <- data.frame(
  grupo = rep(c("A", "B"), each = 100),
  valor = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)
# Criar o gráfico de box plots
ggplot(data, aes(x = grupo, y = valor, fill = grupo)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plots por Grupo", x = "Grupo", y = "Valor") +
  theme(
    plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 20, face = "bold"),
    axis.text = element_text(size = 16)
  )
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Gerar dados simulados
set.seed(123)
grupo_A <- rnorm(50, mean = 5, sd = 2)
grupo_B <- rnorm(50, mean = 6, sd = 2)
# Calcular médias e ICs
calc_ic <- function(data, conf.level = 0.95) {
  n <- length(data)
  mean <- mean(data)
  stderr <- sd(data) / sqrt(n)
  error <- qt(conf.level / 2 + 0.5, df = n - 1) * stderr
  c(mean = mean, lower = mean - error, upper = mean + error)
}
ic_A <- calc_ic(grupo_A)
ic_B <- calc_ic(grupo_B)
# Criar dataframe para plotagem
data_ic <- data.frame(
  grupo = c("A", "B"),
  media = c(ic_A["mean"], ic_B["mean"]),
  lower = c(ic_A["lower"], ic_B["lower"]),
  upper = c(ic_A["upper"], ic_B["upper"])
)
# Plotar os ICs
ggplot(data_ic, aes(x = grupo, y = media)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  labs(title = "Intervalos de Confiança de 95% para Médias dos Grupos",
       x = "Grupo", y = "Média") +
  theme_minimal()
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Gerar dados simulados
set.seed(123)
grupo_A <- rnorm(50, mean = 5, sd = 2)
grupo_B <- rnorm(50, mean = 6, sd = 2)
# Calcular médias e ICs
calc_ic <- function(data, conf.level = 0.95) {
  n <- length(data)
  mean <- mean(data)
  stderr <- sd(data) / sqrt(n)
  error <- qt(conf.level / 2 + 0.5, df = n - 1) * stderr
  c(mean = mean, lower = mean - error, upper = mean + error)
}
ic_A <- calc_ic(grupo_A)
ic_B <- calc_ic(grupo_B)
# Criar dataframe para plotagem
data_ic <- data.frame(
  grupo = c("A", "B"),
  media = c(ic_A["mean"], ic_B["mean"]),
  lower = c(ic_A["lower"], ic_B["lower"]),
  upper = c(ic_A["upper"], ic_B["upper"])
)
# Plotar os ICs
ggplot(data_ic, aes(x = grupo, y = media)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  labs(title = "Intervalos de Confiança de 95% para Médias dos Grupos",
       x = "Grupo", y = "Média") +
  theme(plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 20, face = "bold"),
    axis.text = element_text(size = 16))
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Gerar dados simulados
set.seed(123)
grupo_A <- rnorm(50, mean = 5, sd = 2)
grupo_B <- rnorm(50, mean = 6, sd = 2)
# Calcular médias e ICs
calc_ic <- function(data, conf.level = 0.95) {
  n <- length(data)
  mean <- mean(data)
  stderr <- sd(data) / sqrt(n)
  error <- qt(conf.level / 2 + 0.5, df = n - 1) * stderr
  c(mean = mean, lower = mean - error, upper = mean + error)
}
ic_A <- calc_ic(grupo_A)
ic_B <- calc_ic(grupo_B)
# Criar dataframe para plotagem
data_ic <- data.frame(
  grupo = c("A", "B"),
  media = c(ic_A["mean"], ic_B["mean"]),
  lower = c(ic_A["lower"], ic_B["lower"]),
  upper = c(ic_A["upper"], ic_B["upper"])
)
# Plotar os ICs
ggplot(data_ic, aes(x = grupo, y = media)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  labs(title = "Intervalos de Confiança de 95% para Médias dos Grupos",
       x = "Grupo", y = "Média") +
  theme(plot.title = element_text(size = 24, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 20, face = "bold"),
    axis.text = element_text(size = 16))
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Gerar dados simulados
set.seed(123)
grupo_A <- rnorm(50, mean = 5, sd = 2)
grupo_B <- rnorm(50, mean = 6, sd = 2)
# Calcular médias e ICs
calc_ic <- function(data, conf.level = 0.95) {
  n <- length(data)
  mean <- mean(data)
  stderr <- sd(data) / sqrt(n)
  error <- qt(conf.level / 2 + 0.5, df = n - 1) * stderr
  c(mean = mean, lower = mean - error, upper = mean + error)
}
ic_A <- calc_ic(grupo_A)
ic_B <- calc_ic(grupo_B)
# Criar dataframe para plotagem
data_ic <- data.frame(
  grupo = c("A", "B"),
  media = c(ic_A["mean"], ic_B["mean"]),
  lower = c(ic_A["lower"], ic_B["lower"]),
  upper = c(ic_A["upper"], ic_B["upper"])
)
# Plotar os ICs
ggplot(data_ic, aes(x = grupo, y = media)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  labs(title = "Intervalos de Confiança de 95% para Médias dos Grupos",
       x = "Grupo", y = "Média") +
  theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 14))
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Gerar dados simulados
set.seed(123)
grupo_A <- rnorm(50, mean = 5, sd = 2)
grupo_B <- rnorm(50, mean = 6, sd = 2)
# Calcular médias e ICs
calc_ic <- function(data, conf.level = 0.95) {
  n <- length(data)
  mean <- mean(data)
  stderr <- sd(data) / sqrt(n)
  error <- qt(conf.level / 2 + 0.5, df = n - 1) * stderr
  c(mean = mean, lower = mean - error, upper = mean + error)
}
ic_A <- calc_ic(grupo_A)
ic_B <- calc_ic(grupo_B)
# Criar dataframe para plotagem
data_ic <- data.frame(
  grupo = c("A", "B"),
  media = c(ic_A["mean"], ic_B["mean"]),
  lower = c(ic_A["lower"], ic_B["lower"]),
  upper = c(ic_A["upper"], ic_B["upper"])
)
# Plotar os ICs
ggplot(data_ic, aes(x = grupo, y = media)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  labs(title = "Intervalos de Confiança de 95% para Médias dos Grupos",
       x = "Grupo", y = "Média") +
  theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 12, face = "bold"),
    axis.text = element_text(size = 10))
install.packages("languageserver")
q()
install.packages("languageserver")
load("C:\\Users\\cledson\\Documents\\.RData")
int00.dat
# Functions to read in the CSV table that contains all of the raw data.
# Before running these functions, make sure the file "all-data.csv" is
# in the local directory.
# Also, within the R environment, change the working directory to the directory
# that contains the data file using the toolbar menu:
# File -> Change dir
#
# Read the data from the csv file.
processors <- read.csv("all-data.csv")
################################################################
#
# This function returns the data from the desired column.
# Example:  clock<-get_column("Fp2000","Processor.Clock..MHz.")
get_column <- function(x,y) {
# x = string with the name of the desired benchmark
# y = desired column
#
# Find the indices of all rows that have an entry for the  
# indicated benchmark
benchmark <- paste(paste("Spec",x,sep=""),"..average.base.",
sep="")
ix <- !is.na(processors[,benchmark])
return(processors[ix,y])
}
################################################################
################################################################
# This function extracts the interesting data columns for the given benchmark
# program and returns a dataframe with these columns.
extract_data <- function(benchmark) {
temp <- paste(paste("Spec",benchmark,sep=""),"..average.base.", sep="")
# perf = the performance reported in the database
perf <- get_column(benchmark,temp)
#nperf = performance normalized to the overall range
max_perf <- max(perf)
min_perf <- min(perf)
range <- max_perf - min_perf
nperf <- 100 * (perf - min_perf) / range
clock <- get_column(benchmark,"Processor.Clock..MHz.")
threads <- get_column(benchmark,"Threads.core")
cores <- get_column(benchmark,"Cores")
TDP <- get_column(benchmark,"TDP")
transistors <- get_column(benchmark,"Transistors..millions.")
dieSize <- get_column(benchmark,"Die.size..mm.2.")
voltage <- get_column(benchmark,"Voltage..low.")
featureSize <- get_column(benchmark,"Feature.Size..microns.")
channel <- get_column(benchmark,"Channel.length..microns.")
FO4delay <- get_column(benchmark,"FO4.Delay..ps.")
L1icache <- get_column(benchmark,"L1..instruction...on.chip.")
L1dcache <- get_column(benchmark,"L1..data...on.chip.")
L2cache <- get_column(benchmark,"L2..on.chip.")
L3cache <- get_column(benchmark,"L3..on.chip.")
return(data.frame(nperf,perf,clock,threads,cores,TDP,transistors,dieSize,voltage,featureSize,channel,FO4delay,L1icache,L1dcache,L2cache,L3cache))
}
################################################################
# Extract a new data frame for each of the benchmark programs available in the data set.
int92.dat <- extract_data("Int1992")
fp92.dat <- extract_data("Fp1992")
int95.dat <- extract_data("Int1995")
fp95.dat <- extract_data("Fp1995")
int00.dat <- extract_data("Int2000")
fp00.dat <- extract_data("Fp2000")
int06.dat <- extract_data("Int2006")
fp06.dat <- extract_data("Fp2006")
int00.lm.2 <- update(int00.lm.full, .~. - FO4delay, data =
+ int00.dat)
int00.lm.full <- lm(nperf ~ clock + threads + cores + transistors 
+ dieSize + voltage + featureSize + channel + FO4delay 
+ L1icache + sqrt(L1icache) + L1dcache + sqrt(L1dcache) 
+ L2cache + sqrt(L2cache), data=int00.dat)
int92.lm.full <- lm(nperf ~ clock + threads + cores +
transistors + dieSize + voltage + featureSize + channel +
FO4delay + L1icache + sqrt(L1icache) + L1dcache +
sqrt(L1dcache) + L2cache + sqrt(L2cache), data=int92.dat)
int92.lm.reduced.2 <- update(int92.lm.full, .~. - threads - cores - L2cache - sqrt(L2cache) - L3cache - sqrt(L3cache), data=int92.dat)
save.image("D:\\g_drive\\docencia\\uff\\disciplinas\\posgrad\\vis_rep_data\\codigos\\.RData")
q()
